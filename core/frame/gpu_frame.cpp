#include "../StdAfx.h"

#include "gpu_frame.h"
#include "gpu_frame_desc.h"
#include "../../common/utility/memory.h"
#include "../../common/gl/utility.h"
#include "../../common/gl/pixel_buffer_object.h"

#include <boost/range/algorithm.hpp>

namespace caspar { namespace core {
	
GLubyte progressive_pattern[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xFF, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
	
GLubyte upper_pattern[] = {
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00};
		
GLubyte lower_pattern[] = {
	0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,	0xff, 0xff, 0xff, 0xff};
																																						
struct gpu_frame::implementation : boost::noncopyable
{
	implementation(size_t width, size_t height)
		: alpha_(1.0f), x_(0.0f), y_(0.0f), mode_(video_mode::progressive), texcoords_(0.0, 1.0, 1.0, 0.0)
	{	
		desc_.planes[0] = plane(width, height, 4);
		desc_.plane_count = 1;
		desc_.pix_fmt = pixel_format::bgra;
		if(width >= 2 && height >= 2)
		{
			pbo_.push_back(std::make_shared<common::gl::pixel_buffer_object>(width, height, GL_BGRA));
			pixel_data_.resize(pbo_.size(), 0);
			end_write();
		}
	}

	implementation(const gpu_frame_desc& desc)
		: alpha_(1.0f), x_(0.0f), y_(0.0f), mode_(video_mode::progressive), texcoords_(0.0, 1.0, 1.0, 0.0)
	{			
		desc_ = desc;

		for(size_t n = 0; n < desc_.plane_count; ++n)
		{
			GLuint format = [&]() -> GLuint
			{
				switch(desc_.planes[n].channels)
				{
				case 1: return GL_LUMINANCE;
				case 2: return GL_LUMINANCE_ALPHA;
				case 3: return GL_BGR;
				case 4: return GL_BGRA;
				default: BOOST_THROW_EXCEPTION(out_of_range() << msg_info("1-4 channels are supported") << arg_name_info("desc.planes.channels")); 
				}
			}();

			pbo_.push_back(std::make_shared<common::gl::pixel_buffer_object>(desc_.planes[n].width, desc_.planes[n].height, format));
		}
		pixel_data_.resize(pbo_.size(), 0);
		end_write();
	}
	
	void begin_write()
	{
		pixel_data_ = std::vector<void*>(4, 0);
		boost::range::for_each(pbo_, std::mem_fn(&common::gl::pixel_buffer_object::begin_write));
	}

	void end_write()
	{
		boost::range::transform(pbo_, pixel_data_.begin(), std::mem_fn(&common::gl::pixel_buffer_object::end_write));
	}
	
	void begin_read()
	{	
		pixel_data_ = std::vector<void*>(4, 0);
		boost::range::for_each(pbo_, std::mem_fn(&common::gl::pixel_buffer_object::begin_read));
	}

	void end_read()
	{
		boost::range::transform(pbo_, pixel_data_.begin(), std::mem_fn(&common::gl::pixel_buffer_object::end_read));
	}

	void draw(const gpu_frame_shader_ptr& shader)
	{
		shader->use(desc_);
		glPushMatrix();
		glTranslated(x_*2.0, y_*2.0, 0.0);
		glColor4d(1.0, 1.0, 1.0, alpha_);

		if(mode_ == video_mode::progressive)
			glPolygonStipple(progressive_pattern);
		else if(mode_ == video_mode::upper)
			glPolygonStipple(upper_pattern);
		else if(mode_ == video_mode::lower)
			glPolygonStipple(lower_pattern);

		for(size_t n = 0; n < pbo_.size(); ++n)
		{
			glActiveTexture(GL_TEXTURE0+n);
			pbo_[n]->bind_texture();
		}
		glBegin(GL_QUADS);
			glTexCoord2d(texcoords_.left,	texcoords_.bottom); glVertex2d(-1.0, -1.0);
			glTexCoord2d(texcoords_.right,	texcoords_.bottom); glVertex2d( 1.0, -1.0);
			glTexCoord2d(texcoords_.right,	texcoords_.top);	glVertex2d( 1.0,  1.0);
			glTexCoord2d(texcoords_.left,	texcoords_.top);	glVertex2d(-1.0,  1.0);
		glEnd();
		glPopMatrix();
	}

	unsigned char* data(size_t index)
	{
		if(pbo_.size() < index)
			BOOST_THROW_EXCEPTION(out_of_range());
		return static_cast<unsigned char*>(pixel_data_[index]);
	}

	void reset()
	{
		audio_data_.clear();
		alpha_     = 1.0f;
		x_         = 0.0f;
		y_         = 0.0f;
		texcoords_ = rectangle(0.0, 1.0, 1.0, 0.0);
		mode_      = video_mode::progressive;
	}

	std::vector<common::gl::pixel_buffer_object_ptr> pbo_;
	std::vector<void*> pixel_data_;	
	std::vector<short> audio_data_;

	double alpha_;
	double x_;
	double y_;
	video_mode mode_;
	rectangle texcoords_;

	gpu_frame_desc desc_;
};

gpu_frame::gpu_frame(size_t width, size_t height) 
	: impl_(new implementation(width, height)){}
gpu_frame::gpu_frame(const gpu_frame_desc& desc)
	: impl_(new implementation(desc)){}
void gpu_frame::draw(const gpu_frame_shader_ptr& shader){impl_->draw(shader);}
void gpu_frame::begin_write(){impl_->begin_write();}
void gpu_frame::end_write(){impl_->end_write();}	
void gpu_frame::begin_read(){impl_->begin_read();}
void gpu_frame::end_read(){impl_->end_read();}
void gpu_frame::pix_fmt(pixel_format format) {impl_->desc_.pix_fmt = format;}
unsigned char* gpu_frame::data(size_t index){return impl_->data(index);}
size_t gpu_frame::size(size_t index) const { return impl_->desc_.planes[index].size; }
std::vector<short>& gpu_frame::audio_data() { return impl_->audio_data_; }
void gpu_frame::reset(){impl_->reset();}
void gpu_frame::alpha(double value){ impl_->alpha_ = value;}
void gpu_frame::translate(double x, double y) { impl_->x_ += x; impl_->y_ += y; }
void gpu_frame::texcoords(const rectangle& texcoords){impl_->texcoords_ = texcoords;}
void gpu_frame::mode(video_mode mode){ impl_->mode_ = mode;}
double gpu_frame::x() const { return impl_->x_;}
double gpu_frame::y() const { return impl_->y_;}
}}