#include "../StdAfx.h"

#include "gpu_frame.h"
#include "../../common/utility/memory.h"
#include "../../common/gl/gl_check.h"
#include "../../common/gl/pixel_buffer_object.h"

namespace caspar { namespace core {
	
GLubyte progressive_pattern[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xFF, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
	
GLubyte upper_pattern[] = {
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00};
		
GLubyte lower_pattern[] = {
							0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff};
																																						
struct gpu_frame::implementation : boost::noncopyable
{
	implementation(size_t width, size_t height) 
		: pbo_(width, height), data_(nullptr), width_(width), height_(height), 
			size_(width*height*4), reading_(false), alpha_(1.0f), 
			x_(0.0f), y_(0.0f), mode_(video_mode::progressive), 
			texcoords_(0.0, 1.0, 1.0, 0.0), writing_(false), mapped_(false)
	{	
		if(width > 0 && height > 0)
			end_write();
	}
	
	void begin_write()
	{
		data_ = nullptr;
		pbo_.begin_write();		
	}

	void end_write()
	{
		data_ = static_cast<unsigned char*>(pbo_.end_write());
	}
	
	void begin_read()
	{	
		data_ = nullptr;
		pbo_.begin_read();
	}

	void end_read()
	{
		data_ = static_cast<unsigned char*>(pbo_.end_read());
	}

	void draw()
	{
		glPushMatrix();
		glTranslated(x_*2.0, y_*2.0, 0.0);
		glColor4d(1.0, 1.0, 1.0, alpha_);

		if(mode_ == video_mode::progressive)
			glPolygonStipple(progressive_pattern);
		else if(mode_ == video_mode::upper)
			glPolygonStipple(upper_pattern);
		else if(mode_ == video_mode::lower)
			glPolygonStipple(lower_pattern);

		pbo_.bind_texture();
		glBegin(GL_QUADS);
			glTexCoord2d(texcoords_.left,	texcoords_.bottom); glVertex2d(-1.0, -1.0);
			glTexCoord2d(texcoords_.right,	texcoords_.bottom); glVertex2d( 1.0, -1.0);
			glTexCoord2d(texcoords_.right,	texcoords_.top);	glVertex2d( 1.0,  1.0);
			glTexCoord2d(texcoords_.left,	texcoords_.top);	glVertex2d(-1.0,  1.0);
		glEnd();
		glPopMatrix();
	}
		
	unsigned char* data()
	{
		if(data_ == nullptr)
			BOOST_THROW_EXCEPTION(invalid_operation());
		return data_;
	}

	void reset()
	{
		audio_data_.clear();
		alpha_     = 1.0f;
		x_         = 0.0f;
		y_         = 0.0f;
		texcoords_ = rectangle(0.0, 1.0, 1.0, 0.0);
		mode_      = video_mode::progressive;
	}

	common::gl::pixel_buffer_object pbo_;
	gpu_frame* self_;
	unsigned char* data_;
	size_t width_;
	size_t height_;
	size_t size_;

	bool reading_;
	bool writing_;
	bool mapped_;

	std::vector<short> audio_data_;

	double alpha_;
	double x_;
	double y_;
	video_mode mode_;
	rectangle texcoords_;
};

gpu_frame::gpu_frame(size_t width, size_t height) 
	: impl_(new implementation(width, height)){}
void gpu_frame::begin_write(){impl_->begin_write();}
void gpu_frame::end_write(){impl_->end_write();}	
void gpu_frame::begin_read(){impl_->begin_read();}
void gpu_frame::end_read(){impl_->end_read();}
void gpu_frame::draw(){impl_->draw();}
unsigned char* gpu_frame::data(){return impl_->data();}
size_t gpu_frame::size() const { return impl_->size_; }
size_t gpu_frame::width() const { return impl_->width_;}
size_t gpu_frame::height() const { return impl_->height_;}
const std::vector<short>& gpu_frame::audio_data() const{return impl_->audio_data_;}	
std::vector<short>& gpu_frame::audio_data() { return impl_->audio_data_; }
void gpu_frame::reset(){impl_->reset();}
double gpu_frame::alpha() const{ return impl_->alpha_;}
void gpu_frame::alpha(double value){ impl_->alpha_ = value;}
double gpu_frame::x() const { return impl_->x_;}
double gpu_frame::y() const { return impl_->y_;}
void gpu_frame::translate(double x, double y) { impl_->x_ += x; impl_->y_ += y; }
void gpu_frame::texcoords(const rectangle& texcoords){impl_->texcoords_ = texcoords;}
void gpu_frame::mode(video_mode mode){ impl_->mode_ = mode;}
video_mode gpu_frame::mode() const{ return impl_->mode_;}
}}